// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentCompanyAPI.Models;

namespace RentCompanyAPI.Migrations
{
    [DbContext(typeof(RentCompanyContext))]
    [Migration("20201113140943_Migration32")]
    partial class Migration32
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("RentCompanyAPI.Models.CarInfo", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EndLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IsTaken")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("NumOfSeats")
                        .HasColumnType("decimal");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("decimal");

                    b.Property<int?>("RentServiceServiceId")
                        .HasColumnType("int");

                    b.Property<bool>("Sale")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TypeOfCar")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UserDetailUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("Year")
                        .HasColumnType("decimal");

                    b.HasKey("CarId");

                    b.HasIndex("RentServiceServiceId");

                    b.HasIndex("UserDetailUserId");

                    b.ToTable("CarInfo");
                });

            modelBuilder.Entity("RentCompanyAPI.Models.ConfigurationPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ConfigurationPrices");
                });

            modelBuilder.Entity("RentCompanyAPI.Models.OfficeDetail", b =>
                {
                    b.Property<int>("OfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("Lat")
                        .HasColumnType("float");

                    b.Property<float>("Lng")
                        .HasColumnType("float");

                    b.Property<string>("OfficeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RentServiceServiceId")
                        .HasColumnType("int");

                    b.HasKey("OfficeId");

                    b.HasIndex("RentServiceServiceId");

                    b.ToTable("OfficeDetail");
                });

            modelBuilder.Entity("RentCompanyAPI.Models.Rate", b =>
                {
                    b.Property<int>("RateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CarInfoCarId")
                        .HasColumnType("int");

                    b.Property<string>("RateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RateID");

                    b.HasIndex("CarInfoCarId");

                    b.ToTable("Rate");
                });

            modelBuilder.Entity("RentCompanyAPI.Models.RentService", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Lat")
                        .HasColumnType("decimal");

                    b.Property<decimal>("Lng")
                        .HasColumnType("decimal");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PriceTable")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<double>("Rate")
                        .HasColumnType("double");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ServiceId");

                    b.ToTable("RentService");
                });

            modelBuilder.Entity("RentCompanyAPI.Models.ReservationDetails", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EndOfficeId")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("StartOfficeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReservationId");

                    b.HasIndex("CarId");

                    b.HasIndex("EndOfficeId");

                    b.HasIndex("StartOfficeId");

                    b.HasIndex("UserId");

                    b.ToTable("ReservationDetails");
                });

            modelBuilder.Entity("RentCompanyAPI.Models.UserDetail", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Id")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsVerify")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("LogOut")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("StringToken")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("RentCompanyAPI.Models.CarInfo", b =>
                {
                    b.HasOne("RentCompanyAPI.Models.RentService", null)
                        .WithMany("ServiceCars")
                        .HasForeignKey("RentServiceServiceId");

                    b.HasOne("RentCompanyAPI.Models.UserDetail", null)
                        .WithMany("UserCars")
                        .HasForeignKey("UserDetailUserId");
                });

            modelBuilder.Entity("RentCompanyAPI.Models.OfficeDetail", b =>
                {
                    b.HasOne("RentCompanyAPI.Models.RentService", null)
                        .WithMany("ServiceOffice")
                        .HasForeignKey("RentServiceServiceId");
                });

            modelBuilder.Entity("RentCompanyAPI.Models.Rate", b =>
                {
                    b.HasOne("RentCompanyAPI.Models.CarInfo", null)
                        .WithMany("RateCar")
                        .HasForeignKey("CarInfoCarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RentCompanyAPI.Models.ReservationDetails", b =>
                {
                    b.HasOne("RentCompanyAPI.Models.CarInfo", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentCompanyAPI.Models.OfficeDetail", "EndOffice")
                        .WithMany()
                        .HasForeignKey("EndOfficeId");

                    b.HasOne("RentCompanyAPI.Models.OfficeDetail", "StartOffice")
                        .WithMany()
                        .HasForeignKey("StartOfficeId");

                    b.HasOne("RentCompanyAPI.Models.UserDetail", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
